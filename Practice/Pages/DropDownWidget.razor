@page "/dropdownwidget"
@inject HttpClient Http

<h1>Stock Data</h1>

<p>This endpoint returns the top 20 gainers, losers, and the most actively traded tickers in the US market.</p>

<div class="dropdown-widget">
    <button class="dropdown-toggle" @onclick="ToggleDropdown">
        Show Data
    </button>
    <div class="dropdown-menu" style="display: @(isDropdownOpen || isDropdownWidgetOpen ? "block" : "none")">
        <div class="buttons">
            <button class="@GetButtonClass(nameof(ShowTopGainers))" @onclick="ShowTopGainers">Top Gainers</button>
            <button class="@GetButtonClass(nameof(ShowTopLosers))" @onclick="ShowTopLosers">Top Losers</button>
            <button class="@GetButtonClass(nameof(ShowMostActivelyTraded))" @onclick="ShowMostActivelyTraded">Most Actively Traded</button>
        </div>
        @if (statistics != null && (showTopGainers || showTopLosers || showMostActivelyTraded))
        {
            <div class="action-buttons">
                <div class="display-button">
                    <button class="display-by-button" @onclick="ToggleDisplayInput">Display</button>
                    @if (displayInputVisible)
                    {
                        <div class="display-input">
                            <input type="number" @bind="displayRowCount" min="1" max="20" />
                        </div>
                    }
                </div>
                <div class="sort-button">
                    <div class="dropdown">
                        <button class="sort-by-button">Sort</button>
                        <div class="dropdown-content">
                            <button @onclick="SortByVolume">Volume</button>
                            <button @onclick="SortByPrice">Price</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="data-frame">
                <div class="table-wrapper">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Ticker</th>
                                <th>Price</th>
                                <th>Change Amount</th>
                                <th>Change Percentage</th>
                                <th>Volume</th>
                                <th>Ticker Decryption</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (showTopGainers)
                            {
                                foreach (var data in GetDisplayedTopGainers())
                                {
                                    <tr>
                                        <td>@data.Ticker</td>
                                        <td>@data.Price</td>
                                        <td>@data.Change_Amount</td>
                                        <td>@data.Change_Percentage</td>
                                        <td>@data.Volume</td>
                                        <td>@data.TickerDecryption</td>
                                    </tr>
                                }
                            }
                            else if (showTopLosers)
                            {
                                foreach (var data in GetDisplayedTopLosers())
                                {
                                    <tr>
                                        <td>@data.Ticker</td>
                                        <td>@data.Price</td>
                                        <td>@data.Change_Amount</td>
                                        <td>@data.Change_Percentage</td>
                                        <td>@data.Volume</td>
                                        <td>@data.TickerDecryption</td>
                                    </tr>
                                }
                            }
                            else if (showMostActivelyTraded)
                            {
                                foreach (var data in GetDisplayedMostActivelyTraded())
                                {
                                    <tr>
                                        <td>@data.Ticker</td>
                                        <td>@data.Price</td>
                                        <td>@data.Change_Amount</td>
                                        <td>@data.Change_Percentage</td>
                                        <td>@data.Volume</td>
                                        <td>@data.TickerDecryption</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
        else if (statistics == null)
        {
            <p><em>Loading...</em></p>
        }
    </div>
</div>

@code {
    private bool isDropdownOpen = false;
    private bool isDropdownWidgetOpen = false;
    private TradedTickerStatistics statistics;
    private bool showTopGainers = false;
    private bool showTopLosers = false;
    private bool showMostActivelyTraded = false;
    private bool displayInputVisible = false;
    private int displayRowCount = 5; // Default value

    protected override async Task OnInitializedAsync()
    {
        statistics = await Http.GetFromJsonAsync<TradedTickerStatistics>("https://www.alphavantage.co/query?function=TOP_GAINERS_LOSERS&apikey=8IRABS7SCLY1UNPR");

        if (statistics != null)
        {
            await UpdateTickerDecryption(statistics.TopGainers);
            await UpdateTickerDecryption(statistics.TopLosers);
            await UpdateTickerDecryption(statistics.MostActivelyTraded);
        }

        StateHasChanged();
    }

    private async Task UpdateTickerDecryption(List<TradedTicker> tickers)
    {
        foreach (var ticker in tickers)
        {
            var symbol = ticker.Ticker.Replace("+", "");
            try
            {
                var overview = await Http.GetFromJsonAsync<TickerOverview>($"https://www.alphavantage.co/query?function=OVERVIEW&symbol={symbol}&apikey=8IRABS7SCLY1UNPR");
                if (overview != null)
                {
                    ticker.TickerDecryption = overview.Name;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка при получении данных для символа {symbol}: {ex.Message}");
            }
        }
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    private void ToggleDisplayInput()
    {
        displayInputVisible = !displayInputVisible;
    }

    private void ShowTopGainers()
    {
        showTopGainers = true;
        showTopLosers = false;
        showMostActivelyTraded = false;
        statistics?.TopGainers?.ForEach(ticker => ticker.Ticker = ticker.Ticker.Replace("+", ""));
    }

    private void ShowTopLosers()
    {
        showTopGainers = false;
        showTopLosers = true;
        showMostActivelyTraded = false;
        statistics?.TopLosers?.ForEach(ticker => ticker.Ticker = ticker.Ticker.Replace("+", ""));
    }

    private void ShowMostActivelyTraded()
    {
        showTopGainers = false;
        showTopLosers = false;
        showMostActivelyTraded = true;
        statistics?.MostActivelyTraded?.ForEach(ticker => ticker.Ticker = ticker.Ticker.Replace("+", ""));
    }

    private string GetButtonClass(string buttonName)
    {
        return buttonName switch
        {
            nameof(ShowTopGainers) => showTopGainers ? "active" : "",
            nameof(ShowTopLosers) => showTopLosers ? "active" : "",
            nameof(ShowMostActivelyTraded) => showMostActivelyTraded ? "active" : "",
            _ => ""
        };
    }

    private IEnumerable<TradedTicker> GetDisplayedTopGainers()
    {
        return statistics?.TopGainers?.Take(displayRowCount) ?? Enumerable.Empty<TradedTicker>();
    }

    private IEnumerable<TradedTicker> GetDisplayedTopLosers()
    {
        return statistics?.TopLosers?.Take(displayRowCount) ?? Enumerable.Empty<TradedTicker>();
    }

    private IEnumerable<TradedTicker> GetDisplayedMostActivelyTraded()
    {
        return statistics?.MostActivelyTraded?.Take(displayRowCount) ?? Enumerable.Empty<TradedTicker>();
    }

    private void SortByVolume()
    {
        if (showTopGainers)
        {
            statistics?.TopGainers?.Sort((a, b) => int.Parse(a.Volume).CompareTo(int.Parse(b.Volume)));
        }
        else if (showTopLosers)
        {
            statistics?.TopLosers?.Sort((a, b) => int.Parse(a.Volume).CompareTo(int.Parse(b.Volume)));
        }
        else if (showMostActivelyTraded)
        {
            statistics?.MostActivelyTraded?.Sort((a, b) => int.Parse(a.Volume).CompareTo(int.Parse(b.Volume)));
        }
    }

    private void SortByPrice()
    {
        statistics?.TopGainers?.Sort((a, b) =>
        {
            decimal priceA, priceB;
            decimal.TryParse(a.Price, out priceA);
            decimal.TryParse(b.Price, out priceB);
            return priceA.CompareTo(priceB);
        });

        statistics?.TopLosers?.Sort((a, b) =>
        {
            decimal priceA, priceB;
            decimal.TryParse(a.Price, out priceA);
            decimal.TryParse(b.Price, out priceB);
            return priceA.CompareTo(priceB);
        });

        statistics?.MostActivelyTraded?.Sort((a, b) =>
        {
            decimal priceA, priceB;
            decimal.TryParse(a.Price, out priceA);
            decimal.TryParse(b.Price, out priceB);
            return priceA.CompareTo(priceB);
        });
    }

    public class TradedTickerStatistics
    {
        public string Metadata { get; set; }

        [JsonPropertyName("last_updated")]
        public string LastUpdated { get; set; }

        [JsonPropertyName("top_gainers")]
        public List<TradedTicker> TopGainers { get; set; }

        [JsonPropertyName("top_losers")]
        public List<TradedTicker> TopLosers { get; set; }

        [JsonPropertyName("most_actively_traded")]
        public List<TradedTicker> MostActivelyTraded { get; set; }
    }

    public class TradedTicker
    {
        public string Ticker { get; set; }
        public string Price { get; set; }
        [JsonPropertyName("change_amount")]
        public string Change_Amount { get; set; }
        [JsonPropertyName("change_percentage")]
        public string Change_Percentage { get; set; }
        public string Volume { get; set; }
        [JsonPropertyName("name")]  // изменено с "Name" на "name"
        public string TickerDecryption { get; set; }
    }

    public class TickerOverview
    {
        public string Name { get; set; }
    }
}




